// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CustomerRequestBodyData defines model for CustomerRequestBodyData.
type CustomerRequestBodyData struct {
	Email openapi_types.Email `json:"email"`
	Name  string              `json:"name"`
}

// CustomerResourceRequestBodyData defines model for CustomerResourceRequestBodyData.
type CustomerResourceRequestBodyData struct {
	// Name The name of the resource.
	Name string `json:"name"`

	// Region The region where the resource is located.
	Region string `json:"region"`

	// Type The type of the resource.
	Type string `json:"type"`
}

// CustomerResourceResponseData defines model for CustomerResourceResponseData.
type CustomerResourceResponseData struct {
	// Id The unique identifier for the resource.
	Id openapi_types.UUID `json:"id"`

	// Name The name of the resource.
	Name string `json:"name"`

	// Region The region where the resource is located.
	Region string `json:"region"`

	// Type The type of the resource.
	Type string `json:"type"`
}

// CustomerResponseData defines model for CustomerResponseData.
type CustomerResponseData struct {
	Email string             `json:"email"`
	Id    openapi_types.UUID `json:"id"`
	Name  string             `json:"name"`
}

// Error defines model for Error.
type Error struct {
	Code   string                  `json:"code"`
	Detail string                  `json:"detail"`
	Meta   *map[string]interface{} `json:"meta,omitempty"`
	Status int                     `json:"status"`
	Title  string                  `json:"title"`
}

// ErrorResponse Response that contains the list of errors
type ErrorResponse struct {
	Errors []Error `json:"errors"`
}

// UpdateResource defines model for UpdateResource.
type UpdateResource struct {
	Name   *string `json:"name,omitempty"`
	Region *string `json:"region,omitempty"`
	Type   *string `json:"type,omitempty"`
}

// CustomerResourceResponse defines model for CustomerResourceResponse.
type CustomerResourceResponse struct {
	Data CustomerResourceResponseData `json:"data"`
}

// CustomerResponse defines model for CustomerResponse.
type CustomerResponse struct {
	Data []CustomerResponseData `json:"data"`
}

// CreateCustomerRequestBody defines model for CreateCustomerRequestBody.
type CreateCustomerRequestBody struct {
	Data CustomerRequestBodyData `json:"data"`
}

// CreateCustomerResourceRequestBody defines model for CreateCustomerResourceRequestBody.
type CreateCustomerResourceRequestBody struct {
	Data []CustomerResourceRequestBodyData `json:"data"`
}

// V1CreateCustomerJSONBody defines parameters for V1CreateCustomer.
type V1CreateCustomerJSONBody struct {
	Data CustomerRequestBodyData `json:"data"`
}

// V1CreateCustomerResourcesJSONBody defines parameters for V1CreateCustomerResources.
type V1CreateCustomerResourcesJSONBody struct {
	Data []CustomerResourceRequestBodyData `json:"data"`
}

// V1CreateCustomerJSONRequestBody defines body for V1CreateCustomer for application/json ContentType.
type V1CreateCustomerJSONRequestBody V1CreateCustomerJSONBody

// V1CreateCustomerResourcesJSONRequestBody defines body for V1CreateCustomerResources for application/json ContentType.
type V1CreateCustomerResourcesJSONRequestBody V1CreateCustomerResourcesJSONBody

// V1UpdateResourceJSONRequestBody defines body for V1UpdateResource for application/json ContentType.
type V1UpdateResourceJSONRequestBody = UpdateResource

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Register a new customer
	// (POST /v1/customers)
	V1CreateCustomer(c *gin.Context)
	// Get all cloud resources for a customer
	// (GET /v1/customers/{customer_id}/resources)
	V1GetCustomerResources(c *gin.Context, customerId openapi_types.UUID)
	// Add cloud resources to a customer
	// (POST /v1/customers/{customer_id}/resources)
	V1CreateCustomerResources(c *gin.Context, customerId openapi_types.UUID)
	// Delete a resource
	// (DELETE /v1/resources/{resource_id})
	V1DeleteResource(c *gin.Context, resourceId openapi_types.UUID)
	// Update a cloud resource
	// (PATCH /v1/resources/{resource_id})
	V1UpdateResource(c *gin.Context, resourceId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// V1CreateCustomer operation middleware
func (siw *ServerInterfaceWrapper) V1CreateCustomer(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.V1CreateCustomer(c)
}

// V1GetCustomerResources operation middleware
func (siw *ServerInterfaceWrapper) V1GetCustomerResources(c *gin.Context) {

	var err error

	// ------------- Path parameter "customer_id" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "customer_id", c.Param("customer_id"), &customerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter customer_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.V1GetCustomerResources(c, customerId)
}

// V1CreateCustomerResources operation middleware
func (siw *ServerInterfaceWrapper) V1CreateCustomerResources(c *gin.Context) {

	var err error

	// ------------- Path parameter "customer_id" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "customer_id", c.Param("customer_id"), &customerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter customer_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.V1CreateCustomerResources(c, customerId)
}

// V1DeleteResource operation middleware
func (siw *ServerInterfaceWrapper) V1DeleteResource(c *gin.Context) {

	var err error

	// ------------- Path parameter "resource_id" -------------
	var resourceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", c.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resource_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.V1DeleteResource(c, resourceId)
}

// V1UpdateResource operation middleware
func (siw *ServerInterfaceWrapper) V1UpdateResource(c *gin.Context) {

	var err error

	// ------------- Path parameter "resource_id" -------------
	var resourceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", c.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resource_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.V1UpdateResource(c, resourceId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/customers", wrapper.V1CreateCustomer)
	router.GET(options.BaseURL+"/v1/customers/:customer_id/resources", wrapper.V1GetCustomerResources)
	router.POST(options.BaseURL+"/v1/customers/:customer_id/resources", wrapper.V1CreateCustomerResources)
	router.DELETE(options.BaseURL+"/v1/resources/:resource_id", wrapper.V1DeleteResource)
	router.PATCH(options.BaseURL+"/v1/resources/:resource_id", wrapper.V1UpdateResource)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZS2/bOBD+KwR3j4rtpI9sfGqaFEUW2EXRbvdSBMGEGtssJFIlR26NQP99QVIvi3Li",
	"tEE3KHKT+ZgXv29mSN9wofNCK1Rk+fyGG/xSoqXXOpXoB84MAuFZaUnnaN630xs3KbQiVOQ+oSgyKYCk",
	"VtPPVis3ZsUKc3BfhdEFGqplpkB+9HeDCz7nv007G6Zhj52OaDx326oq8UZKgymffwqyLhNOmwL5nOvr",
	"zyiIV25ZilYYWTiT+Jy/x6W0hIY1klktmnlvqiRy1erSCHxYlyVhbvf3PTIhxKB1F4yBzcPGJKgcBMcr",
	"sIVWtkZFZGGY/Gmg2Fb7Y8gQjfOmcb7x1aOi0/lQLt4XBD0fH+rk8RvkRdb3tEpquwcHvA29yCfMQWb+",
	"I0jkc/5Zr1Sq8VU9MhE65wlfaJMDOdV+R2ujJSPV0nmmIMdtSX/qlWLnGuPVA7/91qQWHfuf8LsoFfnV",
	"GLMdtn9WyNwM0wtGK2wRMxnzx+BSBkDEQsIc+7pCg1uSmLQs0wII01GhYWBMpJvZw67xyPlFrcn7RbCH",
	"yyh8Mh03slTyS4lMpqhILiQattAmMrnFSlnK9Dao/Oqn473/niO65WhaxkbWh0PbO/j7m76bl2+M0Sa2",
	"UegUR01MkXZZn2PwNtJhCai0vSmpCJdo/IFJyvZwJixr1bcyk2Bp5FnCvx3UacwrflOn28POOW7RrNFc",
	"oY9A5xn/gGYtBTLCvNAGjMw2rFSwBpnBdYYJM0hmwzIgdPsatwWUFtOr6w2f87MMrP3bxb7n/ovZrPXX",
	"K0HDgnJfH/xJ9IvcsFUIM4xWQMwVQJDKejhn0pKDthfmYjLAWxjet+4FRNxV6Gqhl51H2/aPQO1jkQJh",
	"k752Z/xbMsVOvsfoGanAUi100z2AoB4XuViBydCKTCrS6mg2e/Zq6aZ87YyK9+m7C582c1CwlGrJpFpr",
	"KdAmrOllbMJApQwEybV0HvpcU4fqIixnf7n9mKMidvrugid8jcYGFYeT2WTmNOsCFRSSz/kzP5TwAmjl",
	"AzZdH05bfT6e2tIYcuomE5jCr62F7KukFYOmIvi87Uxu2gN3NL6tukj5nP97uN2d86R3VdnswtTWbWa6",
	"+yozbG+PZoe7RdbrogbNSXk+m92rP7yTCJ3wuId7DWnTpnvdR0c/T/dHVRgt0FqXktgbRZJ8GF/8zABc",
	"KEKjIGN1NqtTh8t5ZZ6D2exGn2MDLK1LJWcthC/d1i1UT2+azyuZVtOmcHuQLHEU7GQkrpFBljGR6TJt",
	"q71lYK0W0jUPDfhtgUIupGjtmowg/y3SsPnyWRYM5Eiee5+GdlycN81Gz2PpZhx9m8rc3X2ufLnuMiyZ",
	"EpPeOXU9eZrC9fHLxfHB4uT45OA5HC4OTo7hj4Pjw+MXgCBOXh6ld7dw1WVEudm9KLd97Xyi3iOk3luk",
	"URq40gV3MTHZUU1OrZVLFckk3RM5aZ8xLMtLS2wFa+wXGju5s8D8Ykz7wVIZP4X9aMl84u+j5+9pmt7O",
	"s9uLaLtpetN8uiIaKJ0h+cZ5SMJzP9M26Xtzz3Q7RrjX0/9/V7nncUpr2vEQlZTZUjh4LMos2zwx4zEy",
	"I6CUQR92DRO6HtEXMSCxio883EVZuPNbB+JeL9h/HhryY3CJvTc/HIFLL2PyGKnyfX+13Hbeg4BVVVWN",
	"d57Rc0eIVwjWEykfPylrTsGgZu2gpt/rhY0R553RaSncDxYW8YSXJuNzviIq7Hw6hUJO4EsJUBT1I81Q",
	"xgcKjzM7BNgwPYkEXbYGDyWG95ruBcX/29MytyvBsS31zjYLbO/set3qsvovAAD//3wTARUSHgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
