// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	notification "aqua-backend/internal/repositories/notification"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// DeleteAllNotificationsByUserID provides a mock function with given fields: ctx, userId
func (_m *MockRepository) DeleteAllNotificationsByUserID(ctx context.Context, userId string) error {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllNotificationsByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNotificationByID provides a mock function with given fields: ctx, Id
func (_m *MockRepository) DeleteNotificationByID(ctx context.Context, Id string) error {
	ret := _m.Called(ctx, Id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, Id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNotificationsByUserID provides a mock function with given fields: ctx, userId
func (_m *MockRepository) GetNotificationsByUserID(ctx context.Context, userId string) ([]*notification.Notification, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationsByUserID")
	}

	var r0 []*notification.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*notification.Notification, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*notification.Notification); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*notification.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertNotification provides a mock function with given fields: ctx, userId, message
func (_m *MockRepository) InsertNotification(ctx context.Context, userId string, message string) error {
	ret := _m.Called(ctx, userId, message)

	if len(ret) == 0 {
		panic("no return value specified for InsertNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userId, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
